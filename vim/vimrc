" NOTE: run :checkhealth to see for any errors after installation of plugins
" in nvim

set encoding=utf8
set nocompatible              " be iMproved, required
filetype off                  " required

" mapping leader to , instead of \
let mapleader = ","

set syntax=off
set ft=text
set conceallevel=0
set backspace=2
set number
set expandtab
autocmd Filetype yml setlocal tabstop=2
set tabstop=2
set shiftwidth=2
set softtabstop=2
set smarttab
set clipboard+=unnamed
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
map <F7> mzgg=G`z
map <F7> mzgg=G`z

fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()


" https://vi.stackexchange.com/q/202
:set mouse=a

set rtp+=~/.vim/bundle/Vundle.vim
set ignorecase
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" async syntax checking
Plugin 'dense-analysis/ale'
let g:ale_linters = {
  \ 'go': ['gopls'],
  \}
" Set this. Airline will handle the rest for showing lint errors
let g:airline#extensions#ale#enabled = 1
" for coc.vim to handle lsp
let g:ale_disable_lsp = 1

Plugin 'neoclide/coc.nvim'
" plucked from https://github.com/neoclide/coc.nvim
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
"set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Auto import
autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

" Shows indentline
Plugin 'Yggdroot/indentLine'

Plugin 'scrooloose/nerdtree'
"autocmd vimenter * NERDTree
" https://github.com/scrooloose/nerdtree/issues/928
let g:NERDTreeNodeDelimiter = "\u00a0"
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
nmap <silent> <C-q>        :NERDTreeToggle<CR>
vmap <silent> <C-q> <Esc>  :NERDTreeToggle<CR>
omap <silent> <C-q>        :NERDTreeToggle<CR>
imap <silent> <C-q> <Esc>  :NERDTreeToggle<CR>
cmap <silent> <C-q> <C-u>  :NERDTreeToggle<CR>

" shows the git status for files on nerdtree
" NOTE: Has been archived, find a replacement
Plugin 'Xuyuanp/nerdtree-git-plugin'

" Adds the airline at the bottom of the editor bar
Plugin 'vim-airline/vim-airline'
let g:airline_powerline_fonts = 1

Plugin 'flazz/vim-colorschemes'
syntax enable
if has('gui_running')
  set background=light
else
  set background=dark
endif
let g:solarized_termcolors= 256
let g:solarized_termtrans = 1
let g:solarized_degrade = 1
let g:solarized_bold = 1
let g:solarized_underline = 1
let g:solarized_italic = 1
let g:solarized_contrast = "normal"
let g:solarized_visibility= "normal"
"colorscheme molokai
"source ~/.vim/bundle/vim-colorschemes/colors/solarized.vim

" Jump to a file via ctrl + p in the directory
Plugin 'kien/ctrlp.vim'
let g:ctrlp_show_hidden = 1

" Shows git changes on the file being edited
Plugin 'airblade/vim-gitgutter'

Plugin 'fatih/vim-go'
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1

" https://github.com/dense-analysis/ale/issues/609#issuecomment-305609209
" When ale and coc collide
let g:go_fmt_fail_silently = 1

" saves the file when we call :GoBuild etc, which calles :make in turn
set autowrite

" helpers to jump to the errors in the tab when we run :GoBuild
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

" :GoAlternate commands to split test files in different views
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

" Only show quickfix lists
let g:go_list_type = "quickfix"

" Used for struct splits for text
Plugin 'AndrewRadev/splitjoin.vim'

" Install treesitter for syntax highlighting and code folding
Plugin 'nvim-treesitter/nvim-treesitter'

" setting folding method
":setlocal foldmethod=syntax
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()

" to not autofold when opening something in buffer
autocmd BufReadPost,FileReadPost * normal zR


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
